Similarity has always been a key aspect in computer science and statistics 
Any time two element vectors are compared, many different similarity approaches can be used, depending on the final goal of the comparison (Euclidean distance, Pearson correlation coefficient, Spearman’s rank correlation coefficient, and others) 
But if the comparison has to be applied to more complex data samples, with features having different dimensionality and types which might need compression before processing, these measures would be unsuitable 
In these cases, a siamese neural network may be the best choice: it consists of two identical artificial neural networks each capable of learning the hidden representation of an input vector 
The two neural networks are both feedforward perceptrons, and employ error back-propagation during training
 they work parallelly in tandem and compare their outputs at the end, usually through a cosine distance 
The output generated by a siamese neural network execution can be considered the semantic similarity between the projected representation of the two input vectors 
In this overview we first describe the siamese neural network architecture, and then we outline its main applications in a number of computational fields since its appearance in 1994 
Additionally, we list the programming languages, software packages, tutorials, and guides that can be practically used by readers to implement this powerful machine learning model
 This section reviews existing tracking methods that are mostly related to ours
 Tracking by discriminative appearance modeling: One simple yet effective manner of using deep networks for visual tracking is to directly apply correlation filters on the multi-dimensional feature maps of deep Convolutional Neural Networks (CNNs), where the pre-trained CNN model is fixed 
Recently, Danelljan et al 
 have introduced a continuous spatial domain formulation named C-COT, allowing effective integration of multi-resolution deep features 
C-COT and its improved version ECO have achieved top performance in the VOT challenge , but they are not suitable for real-time applications as the tracking speed is rather slow 
Another category of deep trackers  update a pre-trained CNN online to account for the target-specific appearance at test time 
For instance, Wang et al 
 proposes a feature map selection scheme and predicts a response map for the target with a heavily online updating schedule 
However, these methods  rely on computationally inefficient search algorithms, such as sliding window or candidate sampling, which significantly reduce their applicability in real time scenarios 
Meanwhile, they also highly rely on online updates, which are computationally inefficient and not desirable for real-time tasks 
Tracking by Siamese Network: Siamese network based trackers  select target from candidate patches through a matching function learned offline on image pairs 
The matching function is usually implemented by two-branch CNNs with tied parameters, which takes the image pairs as input and predicts their similarity 
Although SiamFC  can run beyond real-time, its tracking accuracy is still inferior to state-of-the-art trackers, due to the lack of online adaptation ability 
Despite SINT  achieves higher tracking accuracy, it adopts optical flow to facilitate candidate sampling and is much slower (about 2 fps) than SiamFC 
Recently, the DSiamM tracker proposes to perform online update of siamese network by integrating correlation filters into the network 
In , a policy is learned to decide whether to locate objects on early layers to speed up the tracking process 
Though we also adopt the Siamese network architecture for tracking, our method significantly differs from existing methods in that ours is able to automatically detect local patterns of target appearance and models their structure relationships 
Experiments confirm that our method can better handle challenge cases like drastic appearance change, partial occlusion, and rotation
Generally, our local pattern detector tends to capture local patterns like heads, legs and torsos of persons, wheels of cars or bicycles, and regions with significant edges (we will show examples in Figure 4 in section 4)
They are common in visual tracking tasks, and their appearances can be significantly different for various targets, sequences and time
Thus, embedding prior knowledge on these generic local patterns into the network is benefit for target recognition during tracking
We regard the prior knowledge as the relationships among local patterns
When the tracked object is undergoing cluttered background or drastic appearance change, the detection result of each single local pattern is not reliable
Thus the relationships between different local patterns (i.e., context information) should be considered to facilitate the detection process
The context information incorporation is achieved by message passing, which can enforce the responses of regions that are highly structural, and suppress the noisy background responses
To implement the message passing process efficiently, we introduce conditional random field (CRF) approximation into our network
We formulate the target’s local pattern detection problem by using a graph and model the joint probability relationships among local patterns generated by previous stage through CRF
A Siamese neural network (sometimes called a twin neural network) is an artificial neural network that uses the same weights while working in tandem on two different input vectors to compute comparable output vectors
Often one of the output vectors is precomputed, thus forming a baseline against which the other output vector is compared
This is similar to comparing fingerprints but can be described more technically as a distance function for locality-sensitive hashing
It is possible to build an architecture that is functionally similar to a siamese network but implements a slightly different function
This is typically used for comparing similar instances in different type sets.
Uses of similarity measures where a twin network might be used are such things as recognizing handwritten checks, automatic detection of faces in camera images, and matching queries with indexed documents
The perhaps most well-known application of twin networks are face recognition, where known images of people are precomputed and compared to an image from a turnstile or similar
It is not obvious at first, but there are two slightly different problems
One is recognizing a person among a large number of other persons, that is the facial recognition problem
DeepFace is an example of such a system
In its most extreme form this is recognizing a single person at a train station or airport
The other is face verification, that is to verify whether the photo in a pass is the same as the person claiming he or she is the same person
The twin network might be the same, but the implementation can be quite different
